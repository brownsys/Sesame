pub extern crate serde;
pub extern crate serde_json;

use serde::{Serialize, Deserialize};

// Used inside the sandbox for serializing/deserializing arguments and results.
#[cfg(target_arch = "wasm32")]
pub fn sandbox_preamble<'a, T: Deserialize<'a>, R: Serialize, F: Fn(T) -> R>(
    functor: F, arg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
    use std::ffi::{CString, CStr};

    // Deserialize input.
    let arg = unsafe { CStr::from_ptr(arg) };
    let arg = serde_json::from_str(arg.to_str().unwrap()).unwrap();

    // Call function.
    let ret = functor(arg);

    // Serialize output.
    let ret = serde_json::to_string(&ret).unwrap();
    let ret = CString::new(ret).unwrap();
    ret.into_raw()
}

// Trait that sandboxed functions should implement.
pub trait AlohomoraSandbox<'a, 'b, T: Serialize + Deserialize<'a>, R: Serialize + Deserialize<'b>> {
    fn invoke(arg: T) -> FinalSandboxOut<R>;
}

// This should be generated by a macro.
#[cfg(not(target_arch = "wasm32"))]
extern "C" {
    pub fn invoke_free_c(arg1: *mut ::std::os::raw::c_char);
}

#[cfg(not(target_arch = "wasm32"))]
#[repr(C)]
pub struct sandbox_out {
    pub result: *mut ::std::os::raw::c_char,
    pub setup: ::std::os::raw::c_ulonglong,
    pub teardown: ::std::os::raw::c_ulonglong,
}

pub struct FinalSandboxOut<R> {
    pub result: R,
    pub setup: u64,
    pub teardown: u64,
}


// Called by Alohomora (from the application process) to invoke the sandbox.
#[macro_export]
macro_rules! invoke_sandbox {
    ($functor:ident, $arg:ident) => {
        // Serialize argument.
        let arg = ::alohomora_sandbox::serde_json::to_string(&$arg).unwrap();
        let arg = ::std::ffi::CString::new(arg).unwrap();

        // Invoke sandbox via C.
        let ret2 = unsafe { $functor(arg.as_ptr()) };
        let ret = ret2.result;

        // Deserialize output.
        let result = unsafe { ::std::ffi::CStr::from_ptr(ret) };
        let result = ::alohomora_sandbox::serde_json::from_str(result.to_str().unwrap()).unwrap();

        // Free memory.
        unsafe { ::alohomora_sandbox::invoke_free_c(ret) };

        // Return.
        return ::alohomora_sandbox::FinalSandboxOut { result: result, setup: ret2.setup, teardown: ret2.teardown };
    }
}
