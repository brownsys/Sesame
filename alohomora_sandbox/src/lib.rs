#![feature(allocator_api)]
#![feature(iter_collect_into)]
pub extern crate bincode;
pub extern crate serde;
pub extern crate serde_json;

use alloc::SandboxAllocator;
use serde::{Serialize, Deserialize};

pub mod ptr;
pub mod vec;
pub mod vec_impl;
pub mod str_impl;
pub mod prim_impl;
pub mod gen_impl;
pub mod alloc;
pub mod swizzle;

// Used inside the sandbox for serializing/deserializing arguments and results.
#[cfg(target_arch = "wasm32")]
pub fn sandbox_preamble<'a, T: std::fmt::Debug, R: Sandboxable, F: Fn(T) -> R>(
    functor: F, arg: *mut std::ffi::c_void) -> *mut std::ffi::c_void {
    use std::os::raw::c_void;
    use std::slice;
    use std::mem;

    // Convert arg to a pointer of the right type.
    let ptr = arg as *mut T;
    
    let ret = unsafe { 
        // Put it into a box so we can get ownership
        let b = Box::from_raw(ptr);
        
        // Call the actual function
        functor(*b)
    };

    // Put the output into a box
    let b = Box::new(ret);

    // Pass on the ptr
    Box::into_raw(b) as *mut c_void
}

// Trait that sandboxed functions should implement.
pub trait AlohomoraSandbox<'a, 'b, T, R> 
    where 
        T: Sandboxable,
        R: Sandboxable
{
    fn invoke(arg: T::InSandboxUnswizzled, sandbox_index: usize) -> *mut R::InSandboxUnswizzled;
}

/// New mega trait that handles copying to/from sandboxes & all swizzling.
pub trait Sandboxable {
    type InSandboxUnswizzled;

    /// Deeply move object `outside` into sandbox memory & recursively swizzle it.
    /// General approach for this takes two steps: 
    ///     1) recursively move everything this type points to into sandboxed memory
    ///     2) then (un)swizzle this type's stack data (to be boxed and passed into sandbox)
    fn into_sandbox(outside: Self, alloc: SandboxAllocator) -> Self::InSandboxUnswizzled;

    /// Deeply copy `inside` out of sandbox memory.
    /// General approach is in the opposite order of `into_sandbox`:
    ///     1) swizzle out this type's stack data
    ///     2) then recursively move everything it points to out of the sandbox
    fn out_of_sandbox(inside: &Self::InSandboxUnswizzled, any_sandbox_ptr: usize) -> Self;
}

// This should be generated by a macro.
#[cfg(not(target_arch = "wasm32"))]
extern "C" {
    pub fn invoke_free_c(arg1: *mut u8);
}

#[cfg(not(target_arch = "wasm32"))]
#[repr(C)]
pub struct sandbox_out {
    pub result: *mut u8,
    pub size: u32,
    pub setup: ::std::os::raw::c_ulonglong,
    pub teardown: ::std::os::raw::c_ulonglong,
}

pub struct FinalSandboxOut<R> {
    pub result: R,
    pub size: u32,
    pub setup: u64,
    pub teardown: u64,
}

// #[cfg(target_arch = "wasm32")]
extern "C" {
    pub fn alloc_mem_in_sandbox(size: usize, sandbox: usize) -> *mut std::ffi::c_void;
    pub fn free_mem_in_sandbox(ptr: *mut std::ffi::c_void, sandbox: usize);
    pub fn get_lock_on_sandbox() -> usize;
    pub fn unlock_sandbox(index: usize);
}

// Called by Alohomora (from the application process) to invoke the sandbox.
#[macro_export]
macro_rules! invoke_sandbox {
    ($functor:ident, $arg:ident, $arg_ty:ty, $ret_ty:ty, $sandbox_index:ident) => {

        // `$arg` is already a swizzled 32 bit type for the sandbox, 
        // so we just make a raw pointer for passing through 'C land' 
        // then the preamble can reconstruct the real type back in Rust
        let new_inside_ptr = Box::into_raw(Box::new_in($arg, ::alohomora_sandbox::alloc::SandboxAllocator::new($sandbox_index)));
        
        // Invoke sandbox via C.
        let ret2: ::alohomora_sandbox::sandbox_out = unsafe { $functor(new_inside_ptr as *mut std::ffi::c_void, $sandbox_index) };
        let ret = ret2.result;

        // Return.
        return ret as *mut <$ret_ty as ::alohomora_sandbox::Sandboxable>::InSandboxUnswizzled;
    }
}
